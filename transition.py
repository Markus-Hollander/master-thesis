import os

from index import HistoneIndex, HistoneQuantification


class Transition:
    """ Cell differentiation transition from cell A to cell B. """
    def __init__(self, cell_1: str, cell_2: str):
        self.cell_1 = cell_1        # type: str
        self.cell_2 = cell_2        # type: str


class DifferentialHistone(Transition):
    def __init__(self, histone_1: HistoneQuantification, histone_2: HistoneQuantification, cfg: dict):
        """
        :param histone_1: object containing all information of a particular histone quantification run
        :param histone_2: object containing all information of a particular histone quantification run
        :param cfg: configuration dictionary
        """
        super().__init__(histone_1.cell, histone_2.cell)
        self.histone = histone_1.histone                                                # type: str

        # shorthands
        name = '{0}_{1}'.format(self.cell_1, self.cell_2)                       # type: str
        # file name generated by histoneHMM differential
        histone_hmm = '{0}-vs-{1}'.format(self.cell_1, self.cell_2)             # type: str
        # file path dictionary for the differential analysis results
        res = cfg['file paths']['differential histone']['differential']                 # type: dict[str, str]
        # directory for intermediate analysis processing steps that can be loaded
        ana = cfg['file paths']['analysis']['pickle dir']                               # type: str

        # paths to the quantification output file of each histone
        self.quant_1_path = histone_1.quant_path                                                            # type: str
        self.quant_2_path = histone_2.quant_path                                                            # type: str
        # path to the differential analysis log file
        self.log_path = os.path.join(res['logs'], name, self.histone + '.txt')                              # type: str
        # directory for the differential histone analysis results
        self.result_dir = os.path.join(res['results'], name, self.histone)                                  # type: str
        # path to the result file with all histone bins
        self.result_path = os.path.join(self.result_dir, histone_hmm + '.txt')                              # type: str
        self.cell_1_results = os.path.join(self.result_dir, histone_hmm + '-' + self.cell_1 + '.gff')       # type: str
        self.cell_2_results = os.path.join(self.result_dir, histone_hmm + '-' + self.cell_2 + '.gff')       # type: str
        # path to the result histone bin file that was converted to .bed format
        self.result_bed = os.path.join(self.result_dir, histone_hmm + '.bed')                               # type: str

        # path to the result.bed file intersected with the gene definitions and the promoter definitions
        self.intersect_path = os.path.join(ana, '_'.join([histone_hmm, self.histone, 'intersect.bed']))     # type: str
        self.promoter_path = os.path.join(ana, '_'.join([histone_hmm, self.histone, 'promoter.bed']))       # type: str
        self.gene_path = os.path.join(ana, '_'.join([histone_hmm, self.histone, 'gene.bed']))               # type: str

        # flag for differential analysis success
        if os.path.isdir(self.result_dir):
            self.success = len(os.listdir(self.result_dir)) >= 6
        else:
            self.success = False


class Differential(Transition):
    def __init__(self, cell_1: str, cell_2: str, cfg: dict):
        super().__init__(cell_1, cell_2)
        # file name base
        self.name = '{0}_{1}'.format(self.cell_1, self.cell_2)                                  # type: str

        # DIFFERENTIAL EXPRESSION ANALYSIS
        # file paths
        dea_dict = cfg['file paths']['differential expression analysis']                        # type: dict[str, str]
        self.dea_result_path = os.path.join(dea_dict['results'], self.name + '.tsv')            # type: str
        self.dea_log_path = os.path.join(dea_dict['logs'], self.name + '.txt')                  # type: str
        self.dea_design_path = os.path.join(dea_dict['design tables'], self.name + '.tsv')      # type: str
        # flags
        self.dea_success = False                                                                # type: bool

        # DIFFERENTIAL HISTONE ANALYSIS
        self.histone = dict()                                                   # type: dict[str, DifferentialHistone]

        # ANALYSIS
        ana = cfg['file paths']['analysis']                                                     # type: dict[str, str]
        self.bed_path = os.path.join(ana['pickle dir'], self.name + '.bed')                     # type: str
        self.closest_prefix = os.path.join(ana['pickle dir'], self.name)                        # type: str

    def load_histone_comparisons(self, index: HistoneIndex, cfg: dict):
        """
        Loads the histone quantification for the cells of this cell differentiation transition.
        :param index: contains information on histone quantification
        :param cfg: configuration dictionary
        """
        # extract the histone quantification information for each of the two cells
        cell_1_histones = index.quantification[self.cell_1]                     # type: dict[str, HistoneQuantification]
        cell_2_histones = index.quantification[self.cell_2]                     # type: dict[str, HistoneQuantification]

        # go over all histones for which information is available for both cells
        for histone in set(cell_1_histones.keys()).intersection(cell_2_histones.keys()):
            # skip histones for which quantification failed
            if not cell_1_histones[histone].success or not cell_2_histones[histone].success:
                continue
            self.histone[histone] = DifferentialHistone(cell_1_histones[histone], cell_2_histones[histone], cfg)
